// TODO package ch.vorburger.muijs - doesn't work yet due to a limitation/bug in ESON 
package mui

// TODO later split following into more specific sub-packages 

// This meta model is of course directly inspired by angular-ui / ui-router
class States {
	refers State start
	contains AbstractState[] states
}
class AbstractState {
	String name
	String urlSeg // TODO later Validation (how?) cannot contain '/' (or be only a '/')
	String[] params
	contains View[] views
	contains AbstractState[] states

	op AbstractState getParentAbstractState() {
		if (eContainer() instanceof AbstractState)
			eContainer() as AbstractState
	}
}
class State extends AbstractState {
	String title // TODO should be an "expression" later
}
class View {
	String name // TODO LOW much later Validation and Ctrl-Space parent scan State's HTML template for available "ui-view"
	String template // TODO later Validate, and Ctrl-Space and F3 to available *.html files!
	String controller // TODO later Ref not String; Validate, and Ctrl-Space and F3 to .. what model?
}

// ----

class GoToAction {
	String state // TODO should be a reference to (to-be-modeled) State SOON
	contains StateParameter[] params
}
class StateParameter {
	String name // TODO should be constrained to reference to the name of StateParameter of this GoToAction's State (OCL? Xbase?)
	String value // TODO use "path" to "scope context"
}

// ----

class Form {
	String legend // TODO should be an "expression" later
	contains FormField[] fields
}

// TODO how-to make label/label/FormFieldType required, but rest not?
class FormField {
	String label // TODO should be an "expression" later
	String model // TODO use.. "path" instead String
	FormFieldType ftype
	boolean required // TODO should be an "expression" later
	contains FormFieldPrefix prefix
	String showOnlyIf // TODO use.. "path" instead String!
}

enum FormFieldType {
	text, email, number
}

// TODO not sure this is the best meta model.. just KISS instead?
abstract class FormFieldPrefix {
}

class FormFieldPrefixGlyphIcon extends FormFieldPrefix {
	GlyphIcon glyphicon
}

enum GlyphIcon {
	envelope, home, edit // TODO list all available glyphicons
}

/*

class View {
	String name
	contains Widget[] content
}

abstract class Widget {
}

abstract class WidgetWithLabel extends Widget {
	String label
}

*/

// ----

class List {
	String model // TODO use.. "path" instead String
	contains ListColumn[] columns
	contains ListOptions options
}

abstract class ListColumn {
	String label // TODO should be an "expression" later
	contains GoToAction action
}

class DataListColumn extends ListColumn {
	String model // TODO use.. "path" instead String
}

class IconListColumn extends ListColumn {
	GlyphIcon glyphicon
}

class ListOptions {
	boolean enableRowSelection
	boolean multiSelect
	boolean enableColumnReordering
	boolean showColumnMenu
}
